모두의 코드님이 올려주신 강의록을 보고 따라하는 것입니다. https://modoocode.com/135

[C++을 배우는 이유]
- 많은 게임과 게임 엔진들
- 대부분의 컴파일러 (gcc, clang .. )
- 동영상 및 오디오 처리
- OS (MS의 윈도우즈가 C++로 쓰였다.)
- 상용 프로그램들 (ex, photoshop)
- 크롬 브라우저
- 딥러닝 프레임워크 (Tensorflow, PyTorch 모두 파이썬은 인터페이스일 뿐 내부적으론 C++로 만들어져 있다.)
- 서버 프로그램 (구글의 검색 서버도 C++로 만들어져 있다.)
- 그 외 금융 등 많은 연산이 필요한 경우들.

C++은 프로그램의 성능이 중요한 부분에서 널리 쓰이고 있다.

다만 많은 사람들이 C++의 단점으로 뽑는 것은 '사용이 어렵다.'라는 것이다. 실제로 C++을 제대로 공부하지 않는다면 쏟아지는 수 많은 컴파일 오류들과 복잡한 템플릿 문법, 그리고 우측값, 좌측값 하는 값 카테고리 등등 많은 좌절감을 느끼게 된다.

[C++]
C++은 역사가 매우 긴 언어이다. 1979년에 컴퓨터 과학자인 Bjarne Stroustrup이 C언어에 class라는 개념을 적립한 C with Classes라는 언어가 C++의 전신이다. 1982년에 해당 언어를 조금 발전 시켜서 C++이라는 이름을 붙였다. 그리고 1998년에 C++의 첫 번째 표준이 공개 되었는데 이를 C++ 98이라 부른다.
2003년에 표준안에 작은 몇 가지 개정이 있었지만 언어 자체는 크게 바뀌지 않았다. 씹어먹는 C++ 강좌는 초반에 9장까지 내용들이 바로 이 시절에 추가된 개념들이다.

그 동안 언어가 정체 상태에 있다가 비로소 2011년이 되어서야 흔히 말하는 '대격변 패치'를 받고 여러가지 새로운 개념들이 추가되었다. 이 버전의 C++을 C++ 11이라고 한다. 그리고 C++ 부터 Modern C++이라고 부른다.
씹어먹는 C++ 강좌에서는 9장 부터 해당 내용들을 다루게 된다.

그 후로 3년마다 C++언어의 새로운 표준안이 공개되고 또 컴파일러들에게 반영되고 있다. C++ 14와 C++ 17에선 비교적 작은 변화만 있었는데, C++20에선 또 다른 대규모의 업데이트를 받을 예정이다.

참고로 C++은 이전 버전과 호환이 꽤나 괜찮은 언어 중 하나이다. 따라서 새로운 버전이 나오더라도 기조의 코드를 거의 대부분 무리 없이 컴파일 할 수 있다. 쉽게 말해 C++ 컴파일러로 C++98 코드를 잘 컴파일 할 수 있다.

물론 이전 버전 호환성이 언어 차원에서 과격한 변화를 가져오기 힘들다는 문제가 있다. Python의 경우 Python2에서 Python3으로 넘어가면서 언어 간의 호환성을 버리는 대신 많은 개선을 할 수 있었다.

** 이제 씹어먹는 C++ 강좌를 차근차근 밟아가자! **
(기간 내에 가능할까 ㅠ)